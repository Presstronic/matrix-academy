services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: matrix-academy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: matrix_user
      POSTGRES_PASSWORD: matrix_password
      POSTGRES_DB: matrix_academy
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matrix_user -d matrix_academy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: matrix-academy-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: matrix-academy-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: production
    container_name: matrix-academy-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
      NODE_ENV: production
      DATABASE_URL: postgresql://matrix_user:matrix_password@postgres:5432/matrix_academy
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORS_ORIGINS: http://localhost:3001,http://localhost:5173
      JWT_SECRET: ${JWT_SECRET:-default-dev-secret-must-be-at-least-32-characters-long}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-default-dev-refresh-secret-must-be-at-least-32-chars}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-minioadmin}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-matrix-academy}
      S3_FORCE_PATH_STYLE: ${S3_FORCE_PATH_STYLE:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (placeholder for future)
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: apps/frontend/Dockerfile
  #   container_name: matrix-academy-frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     VITE_API_URL: http://localhost:3000
  #   depends_on:
  #     - backend

volumes:
  postgres_data:
    name: matrix-academy-postgres-data
  redis_data:
    name: matrix-academy-redis-data
  minio_data:
    name: matrix-academy-minio-data
